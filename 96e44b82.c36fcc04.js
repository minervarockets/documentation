(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{129:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return l}));var i=t(3),a=t(7),c=(t(0),t(181)),r=["components"],s={id:"leituraescrita",title:"Teste de Leitura e Escrita do SD",sidebar_label:"Leitura e Escrita"},o={unversionedId:"aurorav2/software/testes/leituraescrita",id:"aurorav2/software/testes/leituraescrita",isDocsHomePage:!1,title:"Teste de Leitura e Escrita do SD",description:"Ver gloss\xe1rio para mais informa\xe7\xf5es sobre o teste",source:"@site/docs/aurorav2/software/testes/leituraescrita.md",slug:"/aurorav2/software/testes/leituraescrita",permalink:"/documentation/docs/aurorav2/software/testes/leituraescrita",editUrl:"https://github.com/minervarockets/documentation/edit/master/my-website/docs/aurorav2/software/testes/leituraescrita.md",version:"current",sidebar_label:"Leitura e Escrita",sidebar:"Docs",previous:{title:"C\xf3digos de Teste",permalink:"/documentation/docs/aurorav2/software/testes/funcionamento"},next:{title:"Diagrama de Classes",permalink:"/documentation/docs/aurorav2/software/diagramadeclasses"}},u=[{value:"Teste 1 - Arduino",id:"teste-1---arduino",children:[]},{value:"Teste 2 - Teensy",id:"teste-2---teensy",children:[]},{value:"SPI 1MHz",id:"spi-1mhz",children:[]},{value:"SPI 10MHz",id:"spi-10mhz",children:[]},{value:"SPI 25MHz",id:"spi-25mhz",children:[]}],m={toc:u};function l(e){var n=e.components,t=Object(a.a)(e,r);return Object(c.b)("wrapper",Object(i.a)({},m,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Ver ",Object(c.b)("a",{parentName:"em",href:"/documentation/docs/glossario/testes/leituraescrita"},"gloss\xe1rio")," para mais informa\xe7\xf5es sobre o teste")),Object(c.b)("p",null,"O teste de leitura e escrita foi feito usando a biblioteca ",Object(c.b)("em",{parentName:"p"},"SdFat"),". S\xe3o escritas 20000 linhas de dados de 2 bytes (short), 4 bytes (int) e float. "),Object(c.b)("h2",{id:"teste-1---arduino"},"Teste 1 - Arduino"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"FreeStack: 1037\nType is FAT32\nStarting print test.  Please wait.\n\nTest of println(uint16_t)\nTime 5.84 sec\nFile size 128.89 KB\nWrite 22.06 KB/sec\nMaximum latency: 11296 usec, Minimum Latency: 112 usec, Avg Latency: 281 usec\n\nTest of printField(uint16_t, char)\nTime 1.93 sec\nFile size 128.89 KB\nWrite 66.68 KB/sec\nMaximum latency: 39052 usec, Minimum Latency: 36 usec, Avg Latency: 85 usec\n\nTest of println(uint32_t)\nTime 9.09 sec\nFile size 200.00 KB\nWrite 22.00 KB/sec\nMaximum latency: 42996 usec, Minimum Latency: 380 usec, Avg Latency: 443 usec\n\nTest of printField(uint32_t, char)\nTime 2.67 sec\nFile size 200.00 KB\nWrite 75.05 KB/sec\nMaximum latency: 46644 usec, Minimum Latency: 64 usec, Avg Latency: 122 usec\n\nTest of println(float)\nTime 9.96 sec\nFile size 149.00 KB\nWrite 14.95 KB/sec\nMaximum latency: 43052 usec, Minimum Latency: 376 usec, Avg Latency: 487 usec\n\nTest of printField(float, char)\nTime 3.81 sec\nFile size 149.00 KB\nWrite 39.10 KB/sec\nMaximum latency: 46360 usec, Minimum Latency: 124 usec, Avg Latency: 179 usec\n\nDone!\n")),Object(c.b)("h2",{id:"teste-2---teensy"},"Teste 2 - Teensy"),Object(c.b)("p",null,"Embora o teste acima tenha rodado bem no Arduino, n\xe3o obtivemos sucesso nenhum no uso do microSD com o Teensy no CDHS prototipado. Em toda inicializa\xe7\xe3o uma exce\xe7\xe3o era lan\xe7ada e c\xf3digos de erro distintos eram printados (como 0X55,0XFF, 0X30,0X3F, 0X25,0XFF). O prov\xe1vel respons\xe1vel por esse problema \xe9 o ru\xeddo na linha de SPI, principalmente porque a placa prototipada possui um jumper na trilha de clock. Ap\xf3s leitura de algumas refer\xeancias sobre SPI (entre elas este \xf3timo artigo: ",Object(c.b)("em",{parentName:"p"},Object(c.b)("a",{parentName:"em",href:"https://hackaday.com/2016/07/01/what-could-go-wrong-spi/"},"What Could Go Wrong: SPI")),"), percebemos que a frequ\xeancia de SPI poderia estar correlacionada com esse problema. De fato, quando diminu\xedmos a frequ\xeancia de 50MHz para 1MHz o c\xf3digo rodou sem problemas. "),Object(c.b)("p",null,"Fomos aumentando a frequ\xeancia at\xe9 chegar ao m\xe1ximo de 29MHz. Acima disso o problema volta a se manifestar. Abaixo est\xe3o os resultados para diferentes frequ\xeancias de SPI."),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Obs: outra coisa que pode ser feita para aumentar ainda mais a velocidade de salvamento \xe9 mudar o argumento em file.open() de 'FILE_WRITE' para 'O_WRITE | O_CREAT'")),Object(c.b)("h2",{id:"spi-1mhz"},"SPI 1MHz"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"FreeStack: 256284\nType is FAT32\nStarting print test.  Please wait.\n\nTest of println(uint16_t)\nTime 1.88 sec\nFile size 128.89 KB\nWrite 68.70 KB/sec\nMaximum latency: 102578 usec, Minimum Latency: 7 usec, Avg Latency: 91 usec\n\nTest of printField(uint16_t, char)\nTime 1.84 sec\nFile size 128.89 KB\nWrite 70.24 KB/sec\nMaximum latency: 95043 usec, Minimum Latency: 4 usec, Avg Latency: 89 usec\n\nTest of println(uint32_t)\nTime 2.70 sec\nFile size 200.00 KB\nWrite 74.21 KB/sec\nMaximum latency: 91455 usec, Minimum Latency: 8 usec, Avg Latency: 132 usec\n\nTest of printField(uint32_t, char)\nTime 2.65 sec\nFile size 200.00 KB\nWrite 75.39 KB/sec\nMaximum latency: 109861 usec, Minimum Latency: 5 usec, Avg Latency: 130 usec\n\nTest of println(float)\nTime 2.60 sec\nFile size 149.00 KB\nWrite 57.33 KB/sec\nMaximum latency: 253807 usec, Minimum Latency: 23 usec, Avg Latency: 127 usec\n\nTest of printField(float, char)\nTime 2.09 sec\nFile size 149.00 KB\nWrite 71.16 KB/sec\nMaximum latency: 142674 usec, Minimum Latency: 6 usec, Avg Latency: 102 usec\n")),Object(c.b)("h2",{id:"spi-10mhz"},"SPI 10MHz"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"FreeStack: 256284\nType is FAT32\nStarting print test.  Please wait.\n\nTest of println(uint16_t)\nTime 0.69 sec\nFile size 128.89 KB\nWrite 188.16 KB/sec\nMaximum latency: 9667 usec, Minimum Latency: 7 usec, Avg Latency: 33 usec\n\nTest of printField(uint16_t, char)\nTime 0.75 sec\nFile size 128.89 KB\nWrite 171.17 KB/sec\nMaximum latency: 123769 usec, Minimum Latency: 4 usec, Avg Latency: 36 usec\n\nTest of println(uint32_t)\nTime 1.07 sec\nFile size 200.00 KB\nWrite 187.62 KB/sec\nMaximum latency: 101671 usec, Minimum Latency: 8 usec, Avg Latency: 52 usec\n\nTest of printField(uint32_t, char)\nTime 1.00 sec\nFile size 200.00 KB\nWrite 199.80 KB/sec\nMaximum latency: 97328 usec, Minimum Latency: 5 usec, Avg Latency: 49 usec\n\nTest of println(float)\nTime 1.21 sec\nFile size 149.00 KB\nWrite 123.24 KB/sec\nMaximum latency: 90452 usec, Minimum Latency: 23 usec, Avg Latency: 59 usec\n\nTest of printField(float, char)\nTime 0.81 sec\nFile size 149.00 KB\nWrite 184.18 KB/sec\nMaximum latency: 86870 usec, Minimum Latency: 6 usec, Avg Latency: 39 usec\n")),Object(c.b)("h2",{id:"spi-25mhz"},"SPI 25MHz"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"FreeStack: 256284\nType is FAT32\nStarting print test.  Please wait.\n\nTest of println(uint16_t)\nTime 0.73 sec\nFile size 128.89 KB\nWrite 175.84 KB/sec\nMaximum latency: 105129 usec, Minimum Latency: 7 usec, Avg Latency: 35 usec\n\nTest of printField(uint16_t, char)\nTime 0.58 sec\nFile size 128.89 KB\nWrite 222.99 KB/sec\nMaximum latency: 10464 usec, Minimum Latency: 4 usec, Avg Latency: 28 usec\n\nTest of println(uint32_t)\nTime 1.14 sec\nFile size 200.00 KB\nWrite 175.13 KB/sec\nMaximum latency: 123833 usec, Minimum Latency: 8 usec, Avg Latency: 49 usec\n\nTest of printField(uint32_t, char)\nTime 0.94 sec\nFile size 200.00 KB\nWrite 211.86 KB/sec\nMaximum latency: 123710 usec, Minimum Latency: 5 usec, Avg Latency: 46 usec\n\nTest of println(float)\nTime 1.06 sec\nFile size 149.00 KB\nWrite 140.57 KB/sec\nMaximum latency: 3031 usec, Minimum Latency: 23 usec, Avg Latency: 52 usec\n\nTest of printField(float, char)\nTime 0.76 sec\nFile size 149.00 KB\nWrite 195.28 KB/sec\nMaximum latency: 101357 usec, Minimum Latency: 6 usec, Avg Latency: 37 usec\n")))}l.isMDXComponent=!0},181:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return y}));var i=t(0),a=t.n(i);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},c=Object.keys(e);for(i=0;i<c.length;i++)t=c[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)t=c[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),m=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=m(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,c=e.originalType,r=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),l=m(t),d=i,y=l["".concat(r,".").concat(d)]||l[d]||p[d]||c;return t?a.a.createElement(y,s(s({ref:n},u),{},{components:t})):a.a.createElement(y,s({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=t.length,r=new Array(c);r[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<c;u++)r[u]=t[u];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);